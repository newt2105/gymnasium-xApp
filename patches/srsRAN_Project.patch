diff --git a/docker/open5gs/add_users.py b/docker/open5gs/add_users.py
index cf0a4e19ce..88552d98c8 100644
--- a/docker/open5gs/add_users.py
+++ b/docker/open5gs/add_users.py
@@ -127,7 +127,7 @@ def read_from_string(sub_data):
 @click.command()
 @click.option("--mongodb", default="127.0.0.1", help="IP address or hostname of the mongodb instance.")
 @click.option("--mongodb_port", default=27017, help="Port to connect to the mongodb instance.")
-@click.option("--subscriber_data", default="001010123456780,00112233445566778899aabbccddeeff,opc,63bfa50ee6523365ff14c1f45f88737d,8000,9,10.45.1.2", help="Single subscriber data string or full path to subscriber data csv-file.")
+@click.option("--subscriber_data", default="subscriber_db.csv", help="Single subscriber data string or full path to subscriber data csv-file.")
 def main(mongodb, mongodb_port, subscriber_data):
 
     open5gs_client = Open5GS(mongodb, mongodb_port)
diff --git a/docker/open5gs/open5gs.env b/docker/open5gs/open5gs.env
index ceccb774ff..fadf7bee72 100644
--- a/docker/open5gs/open5gs.env
+++ b/docker/open5gs/open5gs.env
@@ -3,7 +3,7 @@ OPEN5GS_IP=10.53.1.2
 UE_IP_BASE=10.45.0
 UPF_ADVERTISE_IP=10.53.1.2
 DEBUG=false
-SUBSCRIBER_DB=001010123456780,00112233445566778899aabbccddeeff,opc,63bfa50ee6523365ff14c1f45f88737d,8000,9,10.45.1.2
+SUBSCRIBER_DB=subscriber_db.csv
 NETWORK_NAME_FULL=srsRAN
 NETWORK_NAME_SHORT=srsRAN
 
diff --git a/docker/open5gs/subscriber_db.csv b/docker/open5gs/subscriber_db.csv
new file mode 100644
index 0000000000..ded6b8b215
--- /dev/null
+++ b/docker/open5gs/subscriber_db.csv
@@ -0,0 +1,18 @@
+#
+# .csv to store UE's information in HSS
+# Kept in the following format: "Name,IMSI,Key,OP_Type,OP/OPc,AMF,QCI,IP_alloc"
+#
+# Name:     Human readable name to help distinguish UE's. Ignored by the HSS
+# IMSI:     UE's IMSI value
+# Key:      UE's key, where other keys are derived from. Stored in hexadecimal
+# OP_Type:  Operator's code type, either OP or OPc
+# OP/OPc:   Operator Code/Cyphered Operator Code, stored in hexadecimal
+# AMF:      Authentication management field, stored in hexadecimal
+# QCI:      QoS Class Identifier for the UE's default bearer.
+# IP_alloc: Statically assigned IP for the UE.
+#
+# Note: Lines starting by '#' are ignored and will be overwritten
+# List of UEs with IMSI, and key increasing by one for each new UE. Useful for testing with AmariUE simulator and ue_count option
+ue01,001010123456780,00112233445566778899aabbccddeeff,opc,63bfa50ee6523365ff14c1f45f88737d,9001,9,10.45.1.2
+ue02,001010123456790,00112233445566778899aabbccddef00,opc,63bfa50ee6523365ff14c1f45f88737d,9001,9,10.45.1.3
+ue03,001010123456791,00112233445566778899aabbccddef01,opc,63bfa50ee6523365ff14c1f45f88737d,9001,9,10.45.1.4
diff --git a/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.cpp b/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.cpp
index a08f21dc3c..a409a72f47 100644
--- a/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.cpp
+++ b/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.cpp
@@ -29,6 +29,13 @@ using namespace srsran;
 e2sm_kpm_du_meas_provider_impl::e2sm_kpm_du_meas_provider_impl(srs_du::f1ap_ue_id_translator& f1ap_ue_id_translator_) :
   logger(srslog::fetch_basic_logger("E2SM-KPM")), f1ap_ue_id_provider(f1ap_ue_id_translator_)
 {
+  // Custom McsDl, NokDl
+  supported_metrics.emplace(
+      "McsDl", e2sm_kpm_supported_metric_t{NO_LABEL, E2_NODE_LEVEL | UE_LEVEL, true, &e2sm_kpm_du_meas_provider_impl::get_mcs_dl});
+
+  supported_metrics.emplace(
+      "NokDl", e2sm_kpm_supported_metric_t{NO_LABEL, E2_NODE_LEVEL | UE_LEVEL, true, &e2sm_kpm_du_meas_provider_impl::get_nok_dl});
+
   // Array of supported metrics.
   supported_metrics.emplace(
       "CQI", e2sm_kpm_supported_metric_t{NO_LABEL, ALL_LEVELS, false, &e2sm_kpm_du_meas_provider_impl::get_cqi});
@@ -309,6 +316,76 @@ bool e2sm_kpm_du_meas_provider_impl::handle_no_meas_data_available(
   return false;
 }
 
+// Custom McsDl
+bool e2sm_kpm_du_meas_provider_impl::get_mcs_dl(const asn1::e2sm::label_info_list_l        label_info_list,
+                                              const std::vector<asn1::e2sm::ue_id_c>&      ues,
+                                              const std::optional<asn1::e2sm::cgi_c>       cell_global_id,
+                                              std::vector<asn1::e2sm::meas_record_item_c>& items)
+{
+  bool meas_collected = false;
+  if (last_ue_metrics.empty()) {
+    return handle_no_meas_data_available(ues, items, asn1::e2sm::meas_record_item_c::types::options::integer);
+  }
+  if ((label_info_list.size() > 1 or
+       (label_info_list.size() == 1 and not label_info_list[0].meas_label.no_label_present))) {
+    logger.debug("Metric: McsDl supports only NO_LABEL label.");
+    return meas_collected;
+  }
+
+  if (ues.empty()) {
+    meas_record_item_c meas_record_item;
+    meas_record_item.set_integer() = 0;
+    items.push_back(meas_record_item);
+    meas_collected = true;
+  }
+
+  for (auto& ue : ues) {
+    gnb_cu_ue_f1ap_id_t gnb_cu_ue_f1ap_id = int_to_gnb_cu_ue_f1ap_id(ue.gnb_du_ue_id().gnb_cu_ue_f1ap_id);
+    uint32_t            ue_idx            = f1ap_ue_id_provider.get_ue_index(gnb_cu_ue_f1ap_id);
+    meas_record_item_c  meas_record_item;
+    meas_record_item.set_integer() = int(last_ue_metrics[ue_idx].dl_mcs.to_uint());
+    items.push_back(meas_record_item);
+    meas_collected = true;
+  }
+
+  return meas_collected;
+}
+
+// Custom NokDl
+bool e2sm_kpm_du_meas_provider_impl::get_nok_dl(const asn1::e2sm::label_info_list_l        label_info_list,
+                                              const std::vector<asn1::e2sm::ue_id_c>&      ues,
+                                              const std::optional<asn1::e2sm::cgi_c>       cell_global_id,
+                                              std::vector<asn1::e2sm::meas_record_item_c>& items)
+{
+  bool meas_collected = false;
+  if (last_ue_metrics.empty()) {
+    return handle_no_meas_data_available(ues, items, asn1::e2sm::meas_record_item_c::types::options::integer);
+  }
+  if ((label_info_list.size() > 1 or
+       (label_info_list.size() == 1 and not label_info_list[0].meas_label.no_label_present))) {
+    logger.debug("Metric: NokDl supports only NO_LABEL label.");
+    return meas_collected;
+  }
+
+  if (ues.empty()) {
+    meas_record_item_c meas_record_item;
+    meas_record_item.set_integer() = 0;
+    items.push_back(meas_record_item);
+    meas_collected = true;
+  }
+
+  for (auto& ue : ues) {
+    gnb_cu_ue_f1ap_id_t gnb_cu_ue_f1ap_id = int_to_gnb_cu_ue_f1ap_id(ue.gnb_du_ue_id().gnb_cu_ue_f1ap_id);
+    uint32_t            ue_idx            = f1ap_ue_id_provider.get_ue_index(gnb_cu_ue_f1ap_id);
+    meas_record_item_c  meas_record_item;
+    meas_record_item.set_integer() = int(last_ue_metrics[ue_idx].dl_nof_nok);
+    items.push_back(meas_record_item);
+    meas_collected = true;
+  }
+
+  return meas_collected;
+}
+
 bool e2sm_kpm_du_meas_provider_impl::get_cqi(const asn1::e2sm::label_info_list_l          label_info_list,
                                              const std::vector<asn1::e2sm::ue_id_c>&      ues,
                                              const std::optional<asn1::e2sm::cgi_c>       cell_global_id,
diff --git a/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.h b/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.h
index 48824501dc..2ff9ed651e 100644
--- a/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.h
+++ b/lib/e2/e2sm/e2sm_kpm/e2sm_kpm_du_meas_provider_impl.h
@@ -100,6 +100,8 @@ private:
                                       asn1::e2sm::meas_record_item_c::types::options value_type);
 
   // Measurement getter functions.
+  metric_meas_getter_func_t get_mcs_dl; // Custom McsDl
+  metric_meas_getter_func_t get_nok_dl; // Custom NokDl
   metric_meas_getter_func_t get_cqi;
   metric_meas_getter_func_t get_rsrp;
   metric_meas_getter_func_t get_rsrq;
